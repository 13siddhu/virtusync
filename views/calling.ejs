<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>VirtuSync - WebRTC & Socket.io</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');
    body {
      font-family: 'Inter', sans-serif;
      background-color: #111827;
      color: #e5e7eb;
    }
    .video-feed {
      object-fit: cover;
      width: 100%;
      height: 100%;
      border-radius: 1rem;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
  </style>
</head>
<body class="min-h-screen flex flex-col items-center justify-center p-4">

  <header class="w-full max-w-4xl mx-auto p-4 text-center z-20">
    <h1 class="text-4xl md:text-5xl font-extrabold text-blue-400">VirtuSync</h1>
  </header>

  <main id="main-content" class="flex flex-1 flex-col items-center justify-center w-full max-w-4xl py-4">
    <section id="call-section" class="w-full mx-auto flex flex-col items-center mt-4">
      <div id="video-grid" class="w-full grid gap-4 p-4 flex-1 items-center justify-center transition-all duration-300"></div>
      <div id="controls" class="flex items-center justify-center p-4 gap-4 bg-gray-800 rounded-full shadow-lg mt-4">
        <button id="toggleMicBtn" class="bg-green-500 text-white font-bold px-4 py-3 rounded-full hover:bg-green-600">üé§</button>
        <button id="toggleCamBtn" class="bg-green-500 text-white font-bold px-4 py-3 rounded-full hover:bg-green-600">üì∑</button>
        <button id="toggleScreenShareBtn" class="bg-gray-700 text-white font-bold px-4 py-3 rounded-full hover:bg-blue-500">üñ•Ô∏è</button>
        <button id="endCallBtn" class="bg-red-600 text-white font-bold px-6 py-3 rounded-full hover:bg-red-700">End Call</button>
      </div>
    </section>
  </main>

  <script>
    const myUserId = "<%= currentUser.id %>";
    const roomId = "<%= roomId %>";
    const audioOnly = "<%= audioOnly %>" === "true";

    const videoGrid = document.getElementById('video-grid');
    const endCallBtn = document.getElementById('endCallBtn');
    const toggleMicBtn = document.getElementById('toggleMicBtn');
    const toggleCamBtn = document.getElementById('toggleCamBtn');
    const toggleScreenShareBtn = document.getElementById('toggleScreenShareBtn');

    let socket = null;
    let peers = new Map();
    let localStream = null;
    let isScreenSharing = false;

    function updateVideoGrid() {
      const participants = [{ id: myUserId, isLocal: true }];
      for (const [peerId] of peers.entries()) {
        participants.push({ id: peerId, isLocal: false });
      }

      videoGrid.innerHTML = '';
      participants.forEach(p => {
        const videoWrapper = document.createElement('div');
        videoWrapper.id = `video-wrapper-${p.id}`;
        videoWrapper.className =
          'video-wrapper w-full aspect-video bg-gray-700 rounded-xl overflow-hidden shadow-xl relative';

        const video = document.createElement('video');
        video.id = `video-${p.id}`;
        video.className = 'video-feed';
        video.autoplay = true;
        video.playsInline = true;
        if (p.isLocal) {
          video.muted = true;
          if (localStream) video.srcObject = localStream;
        }

        const label = document.createElement('div');
        label.className =
          'absolute top-2 left-2 bg-black bg-opacity-50 text-white text-xs px-2 py-1 rounded-full z-10';
        label.textContent = p.isLocal ? 'You' : p.id;

        videoWrapper.appendChild(video);
        videoWrapper.appendChild(label);
        videoGrid.appendChild(videoWrapper);
      });
    }

    const iceServers = {
      iceServers: [
        { urls: 'stun:stun.l.google.com:19302' },
        { urls: 'stun:stun1.l.google.com:19302' },
      ]
    };

    async function createPeerConnection(peerId, isInitiatorFlag) {
      const peerConnection = new RTCPeerConnection(iceServers);

      localStream.getTracks().forEach(track => {
        peerConnection.addTrack(track, localStream);
      });

      peerConnection.ontrack = (event) => {
        const remoteVideo = document.getElementById(`video-${peerId}`);
        if (remoteVideo) {
          remoteVideo.srcObject = event.streams[0];
        }
      };

      peerConnection.onicecandidate = (event) => {
        if (event.candidate) {
          socket.emit('signal', {
            room: roomId,
            to: peerId,
            signal: event.candidate
          });
        }
      };

      peers.set(peerId, peerConnection);
      updateVideoGrid();

      if (isInitiatorFlag) {
        const offer = await peerConnection.createOffer();
        await peerConnection.setLocalDescription(offer);
        socket.emit('signal', {
          room: roomId,
          to: peerId,
          signal: offer
        });
      }

      return peerConnection;
    }

    async function handleSignal(data) {
      const { from, signal } = data;
      let peerConnection = peers.get(from);
      if (!peerConnection) {
        peerConnection = await createPeerConnection(from, false);
      }
      if (signal.type === 'offer') {
        await peerConnection.setRemoteDescription(new RTCSessionDescription(signal));
        const answer = await peerConnection.createAnswer();
        await peerConnection.setLocalDescription(answer);
        socket.emit('signal', { room: roomId, to: from, signal: answer });
      } else if (signal.type === 'answer') {
        await peerConnection.setRemoteDescription(new RTCSessionDescription(signal));
      } else if (signal.candidate) {
        await peerConnection.addIceCandidate(new RTCIceCandidate(signal));
      }
    }

    async function startCall() {
      try {
        localStream = await navigator.mediaDevices.getUserMedia({
          video: !audioOnly,
          audio: true
        });

        updateVideoGrid();
        const localVideo = document.getElementById(`video-${myUserId}`);
        if (localVideo) {
          localVideo.srcObject = localStream;
          await localVideo.play().catch(() => {});
        }

        socket.emit('join-room', roomId);
      } catch (err) {
        console.error('Error accessing media devices:', err);
        alert("Camera/Microphone access denied or not available.");
      }
    }

    function endCall() {
      peers.forEach(peer => peer.close());
      peers.clear();
      if (localStream) localStream.getTracks().forEach(track => track.stop());
      socket.emit('leave-room', roomId);
      window.close();
    }

    async function toggleScreenShare() {
      try {
        if (!isScreenSharing) {
          const screenStream = await navigator.mediaDevices.getDisplayMedia({ video: true });
          const screenTrack = screenStream.getVideoTracks()[0];

          peers.forEach(peer => {
            const sender = peer.getSenders().find(s => s.track.kind === 'video');
            if (sender) sender.replaceTrack(screenTrack);
          });

          screenTrack.onended = () => toggleScreenShare(); // revert on stop
          isScreenSharing = true;
          toggleScreenShareBtn.classList.add('bg-blue-500');
        } else {
          const camStream = await navigator.mediaDevices.getUserMedia({ video: true });
          const camTrack = camStream.getVideoTracks()[0];

          peers.forEach(peer => {
            const sender = peer.getSenders().find(s => s.track.kind === 'video');
            if (sender) sender.replaceTrack(camTrack);
          });

          localStream.removeTrack(localStream.getVideoTracks()[0]);
          localStream.addTrack(camTrack);
          document.getElementById(`video-${myUserId}`).srcObject = localStream;

          isScreenSharing = false;
          toggleScreenShareBtn.classList.remove('bg-blue-500');
        }
      } catch (err) {
        console.error("Screen share error:", err);
      }
    }

    // --- Event Listeners ---
    toggleMicBtn.addEventListener('click', () => {
      const audioTrack = localStream.getAudioTracks()[0];
      audioTrack.enabled = !audioTrack.enabled;
      toggleMicBtn.classList.toggle('bg-red-500', !audioTrack.enabled);
      toggleMicBtn.classList.toggle('bg-green-500', audioTrack.enabled);
    });

    toggleCamBtn.addEventListener('click', () => {
      const videoTrack = localStream.getVideoTracks()[0];
      videoTrack.enabled = !videoTrack.enabled;
      toggleCamBtn.classList.toggle('bg-red-500', !videoTrack.enabled);
      toggleCamBtn.classList.toggle('bg-green-500', videoTrack.enabled);
    });

    toggleScreenShareBtn.addEventListener('click', toggleScreenShare);
    endCallBtn.addEventListener('click', endCall);

    function initializeSocket() {
      socket = io('http://localhost:3000', { query: { userId: myUserId } });
      socket.on('connect', () => startCall());
      socket.on('user-joined', async (data) => {
        if (!peers.has(data.userId)) {
          await createPeerConnection(data.userId, true);
        }
      });
      socket.on('signal', (data) => handleSignal(data));
      socket.on('user-left', (data) => {
        if (peers.has(data.userId)) {
          peers.get(data.userId).close();
          peers.delete(data.userId);
          updateVideoGrid();
        }
      });
    }

    window.addEventListener('load', () => initializeSocket());
  </script>
</body>
</html>
