<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Calling & Chat</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
    <link rel="stylesheet" href="/css/profile.css">
</head>
<body>
    <div class="container">
        <!-- Sidebar for Contacts -->
        <div class="sidebar">
            <div class="header">
                <span class="logo"><i class="fa-solid fa-blender-phone"></i></span>
                <h1>VirtuSync</h1>
            </div>
            <div class="search-container">
                <i class="fa-solid fa-search"></i>
                <input type="text" id="search-input" placeholder="Search contacts...">
            </div>
            <div class="contact-list" id="contact-list">
                <!-- Contact items will be dynamically added here -->
            </div>
            <a href="/logout" class="logout-button">
                <i class="fa-solid fa-right-from-bracket"></i>
                Logout
            </a>
        </div>

        <!-- Main Chat Area -->
        <div class="main-chat-area">
            <div id="no-chat-selected" class="no-chat-selected">
                Select a contact to start chatting.
            </div>

            <div id="chat-window" style="display: none; height: 100%; display: flex; flex-direction: column;">
                <div class="chat-header">
                    <div class="contact-info-container" style="display:flex; align-items: center;">
                      <div class="contact-avatar" id="chat-header-avatar"></div>
                      <div class="contact-info">
                          <h4 id="chat-header-name"></h4>
                          <p id="chat-header-status"></p>
                      </div>
                    </div>
                    <div class="call-buttons">
                        <i id="audio-call-btn" class="fa-solid fa-phone"></i>
                        <i id="video-call-btn" class="fa-solid fa-video"></i>
                    </div>
                </div>
                <div class="chat-messages" id="messages-container">
                    <!-- Chat messages will be appended here -->
                </div>
                <div class="chat-input-area">
                    <i class="fa-solid fa-plus icon"></i>
                    <i class="fa-solid fa-image icon"></i>
                    <i class="fa-solid fa-microphone icon"></i>
                    <input type="text" id="message-input" placeholder="Message..." required>
                    <button id="send-button"><i class="fa-solid fa-paper-plane"></i></button>
                </div>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const currentUserId = "<%- currentUser.id %>";
        let recipientId = null;
        let allUsers = [];
        let activeUsersList = [];
        
        const socket = io({
            query: { userId: currentUserId }
        });
        
        const messagesContainer = document.getElementById('messages-container');
        const contactList = document.getElementById('contact-list');
        const chatWindow = document.getElementById('chat-window');
        const noChatSelected = document.getElementById('no-chat-selected');
        const messageInput = document.getElementById('message-input');
        const sendButton = document.getElementById('send-button');
        const chatHeaderName = document.getElementById('chat-header-name');
        const chatHeaderAvatar = document.getElementById('chat-header-avatar');
        const chatHeaderStatus = document.getElementById('chat-header-status');
        const audioCallBtn = document.getElementById('audio-call-btn');
        const videoCallBtn = document.getElementById('video-call-btn');
        
        const displayContact = (contact) => {
            const contactDiv = document.createElement('div');
            contactDiv.classList.add('contact');
            contactDiv.setAttribute('data-id', contact.id);

            const avatarDiv = document.createElement('div');
            avatarDiv.classList.add('contact-avatar');
            avatarDiv.textContent = contact.email.substring(0, 2).toUpperCase();
            
            const statusDot = document.createElement('div');
            statusDot.classList.add('status-dot');
            const status = activeUsersList.includes(String(contact.id)) ? 'online' : 'offline';
            statusDot.classList.add(status);
            avatarDiv.appendChild(statusDot);

            const infoDiv = document.createElement('div');
            infoDiv.classList.add('contact-info');
            infoDiv.innerHTML = `<h4>${contact.email}</h4><p>${status}</p>`;

            contactDiv.appendChild(avatarDiv);
            contactDiv.appendChild(infoDiv);

            contactDiv.addEventListener('click', () => {
                document.querySelectorAll('.contact').forEach(c => c.classList.remove('active'));
                contactDiv.classList.add('active');

                recipientId = contact.id;
                chatHeaderName.textContent = contact.email;
                chatHeaderAvatar.textContent = contact.email.substring(0, 2).toUpperCase();
                chatHeaderStatus.textContent = activeUsersList.includes(String(contact.id)) ? 'online' : 'offline';
                
                noChatSelected.style.display = 'none';
                chatWindow.style.display = 'flex';
                loadChatHistory(recipientId);
            });

            contactList.appendChild(contactDiv);
        };
        
        const loadUsers = async () => {
            contactList.innerHTML = '';
            try {
                const response = await fetch('/api/users');
                if (!response.ok) {
                    throw new Error('Failed to fetch users.');
                }
                allUsers = await response.json();
                allUsers.forEach(user => {
                    if (user.id != currentUserId) {
                        displayContact(user);
                    }
                });
            } catch (err) {
                console.error('Error loading users:', err);
            }
        };

        const updateContactList = () => {
            contactList.innerHTML = '';
            allUsers.forEach(user => {
                if (user.id != currentUserId) {
                    displayContact(user);
                }
            });
        };

        loadUsers();

        const displayMessage = (data, isCallLink = false) => {
            const messageElement = document.createElement('div');
            messageElement.classList.add('message');

            if (data.fromUserId == currentUserId) {
                messageElement.classList.add('my-message');
            } else {
                messageElement.classList.add('other-message');
            }
            
            if (isCallLink) {
                messageElement.innerHTML = `<div class="message-content call-link-message">
                    <a href="${data.message}" target="_blank">Start Call</a>
                </div>`;
            } else {
                const contentDiv = document.createElement('div');
                contentDiv.classList.add('message-content');
                contentDiv.textContent = data.message;
                messageElement.appendChild(contentDiv);
            }
            
            messagesContainer.appendChild(messageElement);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        };

        const loadChatHistory = async (id) => {
            messagesContainer.innerHTML = '';
            try {
                const response = await fetch(`/api/chat-history?recipientId=${id}`);
                if (!response.ok) {
                    throw new Error('Failed to fetch chat history.');
                }
                const messages = await response.json();
                messages.forEach(msg => {
                    const isCallLink = msg.message_text.startsWith('/start-call/');
                    displayMessage({
                        fromUserId: msg.sender_id,
                        message: msg.message_text
                    }, isCallLink);
                });
            } catch (err) {
                console.error(err);
                const statusElement = document.createElement('div');
                statusElement.classList.add('status-message');
                statusElement.textContent = 'Failed to load chat history.';
                messagesContainer.appendChild(statusElement);
            }
        };
        
        const sendMessage = () => {
            const message = messageInput.value.trim();

            if (recipientId && message) {
                socket.emit('private-message', { recipientId, message });
                messageInput.value = '';
            }
        }
        
        const sendCallLink = (audioOnly = false) => {
            if (!recipientId) {
                alert('Please select a contact to call.');
                return;
            }
            
            // Create a unique room ID for this call
            const uniqueCallId = `${currentUserId}-${recipientId}-${Date.now()}`;
            const link = `/start-call/${recipientId}?callerId=${currentUserId}&callId=${uniqueCallId}&audioOnly=${audioOnly}`;
            
            // Send a chat message with the link
            socket.emit('private-message', { recipientId, message: link });
            
            // Open the call page in a new window for the caller
            window.open(link, '_blank');
        };

        // --- Socket.IO Event Handlers ---
        socket.on('connect', () => {
            console.log("Connected to server, sending user ID.");
        });

        socket.on('active-users', (users) => {
            activeUsersList = users;
            console.log("Active users updated:", activeUsersList);
            updateContactList();
        });

        socket.on('chat-message', (data) => {
            if (data.fromUserId == recipientId || data.fromUserId == currentUserId) {
                // Check if the message is a call link
                const isCallLink = data.message.startsWith('/start-call/');
                displayMessage(data, isCallLink);
            }
        });

        socket.on('status', (message) => {
            const statusElement = document.createElement('div');
            statusElement.classList.add('status-message');
            statusElement.textContent = message;
            messagesContainer.appendChild(statusElement);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        });

        audioCallBtn.addEventListener('click', () => sendCallLink(true));
        videoCallBtn.addEventListener('click', () => sendCallLink(false));
        
        sendButton.addEventListener('click', sendMessage);
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
    </script>
</body>
</html>
