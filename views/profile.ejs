<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>VirtuSync</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
    <link rel="stylesheet" href="/css/profile.css">
</head>
<body>
    <div class="animated-bg"></div>
    <div class="container">
        <div class="sidebar">
            <div class="header">
                <span class="logo"><i class="fa-solid fa-blender-phone"></i></span>
                <h1>VirtuSync</h1>
            </div>
            
            <div class="user-profile">
                <div class="profile-avatar">
                    <i class="fa-solid fa-user-circle"></i>
                </div>
                <div class="profile-info">
                    <h4><%= currentUser.email %></h4>
                </div>
            </div>
            
            <div class="search-container">
                <i class="fa-solid fa-search"></i>
                <input type="text" id="search-input" placeholder="Search by email...">
                <button id="search-btn">Search</button>
            </div>
            <div class="contact-list" id="contact-list"></div>
            <a href="/logout" class="logout-button">
                <i class="fa-solid fa-right-from-bracket"></i>
                Logout
            </a>
        </div>

        <div class="main-chat-area">
            <div id="no-chat-selected" class="no-chat-selected">
                <i class="fa-solid fa-comments"></i>
                <h2>Welcome to VirtuSync</h2>
                <p>Search for a user to start chatting or select a recent contact from the list.</p>
            </div>
            <div id="chat-window" style="display: none;">
                <div class="chat-header">
                    <div class="contact-info-container">
                        <div class="contact-avatar" id="chat-header-avatar"></div>
                        <div class="contact-info">
                            <h4 id="chat-header-name"></h4>
                            <p id="chat-header-status"></p>
                        </div>
                    </div>
                    <div class="call-buttons">
                        <button id="audio-call-btn" class="call-btn audio"><i class="fa-solid fa-phone"></i></button>
                        <button id="video-call-btn" class="call-btn video"><i class="fa-solid fa-video"></i></button>
                    </div>
                </div>
                <div class="chat-messages" id="messages-container"></div>
                <div class="chat-input-area">
                    <button class="input-btn"><i class="fa-solid fa-paperclip"></i></button>
                    <label for="image-upload" class="input-btn">
                        <i class="fa-solid fa-image"></i>
                        <input type="file" id="image-upload" accept="image/*" style="display: none;">
                    </label>
                    <button class="input-btn"><i class="fa-solid fa-microphone"></i></button>
                    <input type="text" id="message-input" placeholder="Message..." required>
                    <button id="send-button" class="send-btn"><i class="fa-solid fa-paper-plane"></i></button>
                </div>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const currentUserId = "<%- currentUser.id %>";
        let recipientId = null;
        let activeUsersList = [];
        const displayedContacts = new Map();
        const socket = io({ query: { userId: currentUserId } });

        const messagesContainer = document.getElementById('messages-container');
        const contactList = document.getElementById('contact-list');
        const chatWindow = document.getElementById('chat-window');
        const noChatSelected = document.getElementById('no-chat-selected');
        const messageInput = document.getElementById('message-input');
        const sendButton = document.getElementById('send-button');
        const chatHeaderName = document.getElementById('chat-header-name');
        const chatHeaderAvatar = document.getElementById('chat-header-avatar');
        const chatHeaderStatus = document.getElementById('chat-header-status');
        const audioCallBtn = document.getElementById('audio-call-btn');
        const videoCallBtn = document.getElementById('video-call-btn');
        const searchInput = document.getElementById('search-input');
        const searchBtn = document.getElementById('search-btn');
        const imageUpload = document.getElementById('image-upload');

        const addOrMoveContact = (contact) => {
            if (contact.id == currentUserId) return;
            
            let contactDiv;
            if (displayedContacts.has(contact.id)) {
                contactDiv = displayedContacts.get(contact.id);
            } else {
                contactDiv = document.createElement('div');
                contactDiv.classList.add('contact');
                contactDiv.setAttribute('data-id', contact.id);

                const avatarDiv = document.createElement('div');
                avatarDiv.classList.add('contact-avatar');
                avatarDiv.textContent = contact.email.substring(0, 2).toUpperCase();
                const statusDot = document.createElement('div');
                statusDot.classList.add('status-dot');
                avatarDiv.appendChild(statusDot);

                const infoDiv = document.createElement('div');
                infoDiv.classList.add('contact-info');
                infoDiv.innerHTML = `<h4>${contact.email}</h4><p></p>`;

                contactDiv.appendChild(avatarDiv);
                contactDiv.appendChild(infoDiv);
                
                contactDiv.addEventListener('click', () => {
                    document.querySelectorAll('.contact').forEach(c => c.classList.remove('active'));
                    contactDiv.classList.add('active');

                    recipientId = contact.id;
                    chatHeaderName.textContent = contact.email;
                    chatHeaderAvatar.textContent = contact.email.substring(0, 2).toUpperCase();
                    
                    noChatSelected.style.display = 'none';
                    chatWindow.style.display = 'flex';
                    loadChatHistory(recipientId);
                    updateContactStatus(contact.id);
                });
                displayedContacts.set(contact.id, contactDiv);
            }
            
            if (contactList.firstChild !== contactDiv) {
                contactList.prepend(contactDiv);
            }

            updateContactStatus(contact.id);
        };

        const updateContactStatus = (contactId) => {
            const contactDiv = displayedContacts.get(contactId);
            if (contactDiv) {
                const status = activeUsersList.includes(String(contactId)) ? 'online' : 'offline';
                const statusDot = contactDiv.querySelector('.status-dot');
                const statusText = contactDiv.querySelector('.contact-info p');
                if (statusDot) statusDot.className = `status-dot ${status}`;
                if (statusText) statusText.textContent = status;
                
                if (contactId == recipientId) {
                    chatHeaderStatus.textContent = status;
                }
            }
        };

        const loadRecentContacts = async () => {
            try {
                const response = await fetch('/api/recent-contacts');
                if (!response.ok) throw new Error('Failed to fetch contacts');
                const contacts = await response.json();
                
                contacts.forEach(contact => {
                    addOrMoveContact(contact);
                });
            } catch (err) {
                console.error("Error loading recent contacts:", err);
            }
        };

        const searchUser = async () => {
            const query = searchInput.value.trim();
            if (!query) return;

            if (query == currentUserId || (query.includes('@') && query === "<%- currentUser.email %>")) {
                alert("You cannot search for yourself.");
                return;
            }

            let url = '/api/search-user?';
            if (query.includes('@')) {
                url += `email=${encodeURIComponent(query)}`;
            } else {
                url += `id=${encodeURIComponent(query)}`;
            }

            try {
                const response = await fetch(url);
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error("Search API Error:", response.status, errorText);
                    throw new Error('User not found.');
                }
                const foundUser = await response.json();
                
                addOrMoveContact(foundUser);
                
                const contactToActivate = displayedContacts.get(foundUser.id);
                if (contactToActivate) {
                    contactToActivate.click();
                }

            } catch (err) {
                console.error('Error searching user:', err);
                alert('User not found.');
            }
        };

        searchBtn.addEventListener('click', searchUser);
        searchInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') searchUser();
        });

        const isCallLink = (message) => {
            return message && message.startsWith(`${window.location.origin}/calling?room=`);
        };
        
        const displayMessage = (data) => {
            const messageElement = document.createElement('div');
            messageElement.classList.add('message');

            if (data.fromUserId == currentUserId) {
                messageElement.classList.add('my-message');
            } else {
                messageElement.classList.add('other-message');
            }

            const contentDiv = document.createElement('div');
            contentDiv.classList.add('message-content');

            if (isCallLink(data.message)) {
                const link = document.createElement('a');
                link.href = data.message;
                link.target = "_blank";
                link.textContent = 'Join the call';
                link.classList.add('call-link-message');
                contentDiv.appendChild(link);
            } else if (data.message && data.message.startsWith('data:image/')) {
                 const img = new Image();
                 img.src = data.message;
                 img.classList.add('chat-image');
                 contentDiv.appendChild(img);
            } else {
                contentDiv.textContent = data.message;
            }

            messageElement.appendChild(contentDiv);
            messagesContainer.appendChild(messageElement);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        };

        const loadChatHistory = async (id) => {
            messagesContainer.innerHTML = '';
            try {
                const response = await fetch(`/api/chat-history?recipientId=${id}`);
                if (!response.ok) throw new Error('Failed to fetch chat history.');
                const messages = await response.json();
                messages.forEach(msg => {
                    displayMessage({
                        fromUserId: msg.sender_id,
                        message: msg.message_text
                    });
                });
            } catch (err) {
                const statusElement = document.createElement('div');
                statusElement.classList.add('status-message');
                statusElement.textContent = 'Failed to load chat history.';
                messagesContainer.appendChild(statusElement);
            }
        };

        const sendMessage = (message) => {
            if (!recipientId) {
                alert('Please select a contact to send a message to.');
                return;
            }
            if (!message.trim()) return;

            socket.emit('private-message', { recipientId, message });
            messageInput.value = '';
        }

        imageUpload.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file && recipientId) {
                const reader = new FileReader();
                reader.onload = (event) => {
                    const base64Image = event.target.result;
                    sendMessage(base64Image);
                };
                reader.readAsDataURL(file);
            }
        });

        function generateRoomId() {
             return Math.random().toString(36).substring(2, 9);
        }

        function sendCallInvite(audioOnly = false) {
            if (!recipientId) {
                alert('Please select a contact to call.');
                return;
            }
            
            const roomId = generateRoomId();
            const callLink = `${window.location.origin}/calling?room=${roomId}&audioOnly=${audioOnly}`;
            
            window.open(callLink, '_blank');
            sendMessage(callLink);
        }

        const displayStatusMessage = (message, senderId) => {
            if (senderId == recipientId) {
                const statusElement = document.createElement('div');
                statusElement.classList.add('status-message');
                statusElement.textContent = message;
                messagesContainer.appendChild(statusElement);
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }
        };

        socket.on('connect', () => {
            loadRecentContacts();
        });

        socket.on('active-users', (users) => {
            activeUsersList = users;
            displayedContacts.forEach((contactDiv, id) => {
                updateContactStatus(id);
            });
        });

        socket.on('chat-message', (data) => {
            if (data.fromUserId == recipientId || data.fromUserId == currentUserId) {
                displayMessage(data);
            }
            
            if (!displayedContacts.has(data.fromUserId) && data.fromUserId != currentUserId) {
                fetch(`/api/search-user?id=${data.fromUserId}`)
                    .then(res => res.json())
                    .then(user => addOrMoveContact(user))
                    .catch(err => console.error("Could not fetch user info for new message sender."));
            }
        });

        socket.on('status', (message) => {
            const statusElement = document.createElement('div');
            statusElement.classList.add('status-message');
            statusElement.textContent = message;
            messagesContainer.appendChild(statusElement);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        });

        socket.on('call-ended-notification', (data) => {
          displayStatusMessage(`Call with ${data.fromUserId} has ended.`, data.fromUserId);
        });

        socket.on('error', (err) => {
          console.error("Socket error:", err);
        });
        
        audioCallBtn.addEventListener('click', () => sendCallInvite(true));
        videoCallBtn.addEventListener('click', () => sendCallInvite(false));

        sendButton.addEventListener('click', () => {
            const message = messageInput.value.trim();
            sendMessage(message);
        });
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                const message = messageInput.value.trim();
                sendMessage(message);
            }
        });
    </script>
</body>
</html>